#include <string>
#include <iostream>

using std::string;
using std::cin;
using std::cout;



// класс - сущность "пользователь"
// данный класс имеет поля (переменные)
// и методы (функции), по работе с ними
class User {
public:
	// модификатором "public" - мы открываем доступ к методам (функциям)
	// которые мы сможем вызывать у объекта класса, через точку
	// в методы отправятся следующие функции: получение/изменение
	// значений полей класса
	// конструткор (инициализатор) нового объекта класса, деструктор -
	// - метод, который вызывается при удалении объекта класса
	// а также, дополнительные функции (методы), по работе с объектом:
	// печать информации о пользователи, увеличение его возраста на ед.

	// констурктор класса
	User(string name, string surname, size_t age)
		: m_name(std::move(name)), m_surname(std::move(surname)), m_age(age) {

		// пустое тело метода - конструткора
		// вся инициализация вынесена в блок инициализации (после двоеточия)
		// подробнее про списк инициализации прочитайте на ravesli.com
		// также, в списке инициализации задействовано такое понятие,
		// как перемещение объекта: std::move, про него тоже прочитайте
		// на ravesli.com

	}

	// метод изменения поля - имя
	void setName(const string name) {
		m_name = name;
	}

	// метод изменения поля - фамилия
	void setSurname(const string surname) {
		m_surname = surname;
	}
	
	// метод изменения поля - возраст
	void setAge(size_t age) {
		m_age = age;
	}

	// метод получения значения поля - имя
	string getName() {
		return m_name;
	}

	// метод получения значения поля - фамилия
	string getSurname() {
		return m_surname;
	}

	// метод получения значения поля - возраст
	size_t getAge() {
		return m_age;
	}

	// метод печати на консоле информации о пользователе
	void print() {
		cout << m_name
			 << '\n'
			 << m_surname
			 << '\n'
			 << m_age
			 << std::endl;
	}

	// метод увеличения возраста пользователя на один год
	void addOneYaer() {
		++m_age;
	}

private:
	// модификатором доступа "private" - мы закрываем доступ к переменным
	// класса из вне, для защиты этих данных
	// доступ к ним, будет осуществляться через методы получения и установки
	// значения, известные также, как "set", and "get"

	string m_name{}; // переменная (поле), которая хранит имя пользователя
	string m_surname{}; // переменная (поле) для фамилии
	size_t m_age{}; // переменная (поле) - возраст
};


// структура для хранения данных пользователя
// которые будут помещены в класс пользователя
struct UserData {
	string name{};
	string surname{};
	size_t age{};
};

string getStringEnter() {

	// тело функции
	// функция получения пользовательского ввода
	// проверке его на ошибки
	// и возврату корректного значения

	return string();
}

size_t getIntEnter() {

	// тело функции
	// функция получения пользовательского ввода
	// проверке его на ошибки
	// и возврату корректного значения

	return 0;
}

// функция создания нового пользователя
// принимает структуру данных пользователя, как указатель
// если указатель равен нулю, то мы запрашиваем данные
// у пользователя с консоли
User* createUser(const UserData* userData = nullptr) {
	if (userData) {
		return new User(userData->name, userData->surname, userData->age);
	}

	cout << "Введите имя нового пользователя:" << std::endl;

	// вызов функции проверки пользовательского ввода
	// которая возвращает корректную строку
	// функцию можно реализовать любым способом
	string name = getStringEnter();
	string surname = getStringEnter();
	size_t age = getIntEnter();

	return new User(name, surname, age);
}

// функция для редактирования объекта
// модели "пользователь"
// принимет указатель на редактируемый объект
// и указатель на данные заполнитель (если таки есть)
// возвращает указатель на тот объект, который мы редактировали
// может ничего не возвращать
User* editUser(User* user, UserData* userData = nullptr) {

	// переменная - триггер, которая нужна для проверки
	// удалять ли нам объект, т к мы можем удалить его
	// только в том случае, если создали сами
	bool deleteObj = false;


	if (!userData) {
		deleteObj = true;

		// для сокращение дублирования кода
		// если в указателе не будет данных
		// то мы сами создадим эти данные
		userData = new UserData{};

		cout << "Введите новые данные для пользователя:" << std::endl;

		// вызов функции проверки пользовательского ввода
		// которая возвращает корректную строку
		// функцию можно реализовать любым способом
		userData->name = getStringEnter();
		userData->surname = getStringEnter();
		userData->age = getIntEnter();
	}

	user->setName(userData->name);
	user->setSurname(userData->surname);
	user->setAge(userData->age);

	if (deleteObj) {
		delete userData;
	}

	return user;
}


// функция удаления объекта
// модели - "пользователь"
bool removeUser(User* user) {
	delete user;

	return true;
}
